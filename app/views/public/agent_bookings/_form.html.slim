- url = @agent_booking.new_record? ? public_agent_bookings_path : public_agent_booking_path(@agent_booking.token || @agent_booking.to_param)
= form_with(model: [:public, @agent_booking], url: url) do |f|
  .card.shadow-sm[class=('bg-light' unless @agent_booking.booking_agent_responsible?)]
    - if %i[open_request booking_agent_request awaiting_tenant definitive_request].include? @agent_booking.booking.booking_state.to_sym
      .card-header.bg-warning-subtle.text-center
        = @agent_booking.booking.booking_state.translate(:label)
    .card-body
      - errors = @agent_booking.errors.to_hash(true).except(%w[booking.tenant.bookings booking.agent_booking.tenant_email bookings.occupancies.base])
      - if errors.any?
        .alert.alert-danger.d-flex
          .me-3
            i.fa.fa-exclamation-circle
          ul.mb-0.ps-3
            - errors.values.flatten.each do |error|
              li= error

      = f.fields_for :booking, (@agent_booking.booking || @agent_booking.build_booking) do |bf|
        h4.mt-0= Occupancy.model_name.human
        fieldset
          - if @agent_booking.booking.deadline
            .mb-3
              label=Booking.human_attribute_name(:deadline)
              div
                =<> l(@agent_booking.booking.deadline.at, format: :short)

        fieldset 
          = react_component('BookingOccupancyForm', { \ 
              organisation: Public::OrganisationSerializer.render_as_hash(current_organisation), \
              booking: Public::BookingSerializer.render_as_hash(@agent_booking.booking), \
              namePrefix: 'agent_booking[booking_attributes]', \ 
              required: true, \
              disabled: !@agent_booking.booking.editable?, \
              defaultBeginsAtTime: current_organisation&.settings&.default_begins_at_time, \
              defaultEndsAtTime: current_organisation&.settings&.default_ends_at_time, \
              occupiableInvalidFeedback: @agent_booking.booking.errors.to_hash(true).slice(:occupiable_ids, :home_id).values.flatten.to_sentence, \
              occupancyInvalidFeedback: @agent_booking.booking.errors.to_hash(true).slice(:begins_at, :begins_at_time, :ends_at, :ends_at_time).values.flatten.to_sentence, \
              defaultView: current_user&.default_calendar_view || current_organisation&.settings&.default_calendar_view \
            }) 

        fieldset 
          h4= Tenant.model_name.human
          = render partial: 'public/bookings/booking_category_fields', locals: { booking: @agent_booking.booking, f: bf }
          = bf.text_field :purpose_description, required: false 
          = bf.text_field :approximate_headcount, required: false , inputmode: "numeric" 
          = f.text_area :tenant_infos, required: false, rows: 3, help: t('.tenant_infos_help')
          = bf.text_area :remarks, required: false
          = f.email_field :tenant_email, required: false, disabled: !@agent_booking.booking_agent_responsible?, help: t('.tenant_email_help')
          = bf.hidden_field :committed_request
  
        fieldset.mt-4
          h5.mt-0= BookingQuestion.model_name.human(count: 2)
          - # Don't use the `tenant_visible` scope here, because there are new booking_question responses in this array
          = bf.fields_for :booking_question_responses, @agent_booking.booking.booking_question_responses.sort_by(&:ordinal) do |bqrf|
            - response = bqrf.object
            - question = response.booking_question
            - next if question.booking_agent_not_visible?
            = bqrf.hidden_field :booking_question_id
            = render partial: response.booking_question.to_partial_path('booking_form_field'), locals: { booking: @agent_booking.booking, response: response, question: question, form: bqrf, disabled: !response.editable?(:booking_agent) }
          
      
      fieldset 
        h4= AgentBooking.model_name.human
        = f.text_field :booking_agent_code, disabled: !@agent_booking.booking_agent_responsible?
        = f.text_field :booking_agent_ref, required: false, disabled: !@agent_booking.booking_agent_responsible?

      .form-actions.pt-4.mt-3
        - if @agent_booking.booking_agent_responsible?
          =<> f.submit
          - @agent_booking.booking.booking_flow.booking_agent_actions.values.each do |booking_action|
            - Array.wrap(booking_action.invokable_with(current_user:)).compact.each do |invokable_with|
              - label = invokable_with[:label] || booking_action.label
              = f.button name: :booking_action, value: booking_action.key, method: :patch, \
                data: { confirm: invokable_with[:confirm], disable_with: label }.compact, \
                class: "me-2 btn btn-outline-#{invokable_with[:variant] || :primary}"
                = label
