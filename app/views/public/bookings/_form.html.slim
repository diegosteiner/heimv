= form_with(model: [:public, @booking], local: true, url: public_booking_path(@booking.token), disabled: !@booking.editable, html: { novalidate: true }) do |f|
  .card.[class=({'bg-light' => !@booking.editable, 'border-danger' => @booking.errors.any? }.select { _2 }.keys )]
    .card-body
      - if @booking.booking_state.t(:public_info).present?
        .alert.alert-info.d-flex
          .me-3
            i.fa.fa-info-circle
          p.m-0= @booking.booking_state.t(:public_info)
      - if @booking.begins_at < @booking.organisation.settings.last_minute_warning.seconds.from_now
        .alert.alert-warning.d-flex
          .me-3
            i.fa.fa-exclamation-triangle
          p.m-0= t('.last_minute_warning')
      - if @booking.errors.any?
        .alert.alert-danger.d-flex
          .me-3
            i.fa.fa-exclamation-circle               
          - @booking.errors.delete("tenant.bookings")
          - @booking.errors.delete("occupancies.base")
          = @booking.errors.full_messages.to_sentence
      = image_tag current_organisation.logo, class: 'mx-auto d-block m-4', style: 'max-width: 180px; max-height: 180px;' if current_organisation&.logo.present?
      fieldset
        - if @booking.deadline
          .mb-3
            label=Booking.human_attribute_name(:deadline)
            div
              =<> l(@booking.deadline.at, format: :short)

      = render partial: 'public/occupiables/select', locals: { booking: @booking, form: f, disabled: !@booking.editable }

      fieldset 
        = react_component('calendar/CalendarFormField', label: Booking.human_attribute_name(:begins_at),
                                                    id: 'booking_begins_at',
                                                    name: 'booking[begins_at]',
                                                    value: @booking.begins_at&.iso8601,
                                                    disabled: !@booking.editable?, required: true,
                                                    invalidFeedback: @booking.errors[:begins_at].to_sentence)

        = react_component('calendar/CalendarFormField', label: Booking.human_attribute_name(:ends_at),
                                                    id: 'booking_ends_at',
                                                    name: 'booking[ends_at]',
                                                    value: @booking.ends_at&.iso8601,
                                                    disabled: !@booking.editable?, required: true,
                                                    invalidFeedback: @booking.errors[:ends_at].to_sentence)

        = f.email_field :email, disabled: true
        = f.fields_for :tenant, @booking.tenant do |cf|

          .row
            .col
              = cf.text_field :first_name, disabled: !@booking.editable
            .col
              = cf.text_field :last_name, disabled: !@booking.editable

          = cf.text_field :street_address, disabled: !@booking.editable
          = cf.text_field :address_addon, disabled: !@booking.editable, help: t('optional')

          .row
            .col-md-4
              = cf.text_field :zipcode, disabled: !@booking.editable
            .col-md-8
              = cf.text_field :city, disabled: !@booking.editable

          = cf.form_group :country_code, label: { text: Tenant.human_attribute_name(:country_code), required: true } do
            = cf.country_select :country_code, { default: "CH", priority_countries: %w[CH DE FR IT] }, class: 'form-control', disabled: !@booking.editable
          = cf.text_area :phone, rows: 1, disabled: !@booking.editable
          = cf.date_select :birth_date, use_two_digit_numbers: true, end_year: Time.zone.today.year - 100, start_year: Time.zone.today.year - 17, disabled: !@booking.editable, include_blank: true, required: @booking.tenant.birth_date_required?, help: !@booking.tenant.birth_date_required? && t('optional')
          = cf.collection_select :locale, Tenant.locales, :first, :first, {}, disabled: !@booking.editable

      fieldset
        h5= t('.booking_details')
        = f.text_field :tenant_organisation, help: t('optional'), disabled: !@booking.editable
        = f.text_area :invoice_address, help: t('optional'), disabled: !@booking.editable
        = f.form_group :committed_request, class: 'mb-3'
          = f.label :committed_request, Booking.human_attribute_name(:committed_request), class: 'required'
          = f.radio_button(:committed_request, false, label: t(:'activerecord.enums.booking.committed_request.provisional_request'), disabled: (!@booking.editable || @booking.committed_request?))
          = f.radio_button :committed_request, true, label: t(:'activerecord.enums.booking.committed_request.definitive_request'), disabled: !@booking.editable
          - @booking.errors[:committed_request].each do |error|
            .invalid-feedback.d-block = error

        - if current_organisation.booking_categories.many?
          = f.form_group :booking_category_id
            = f.label :booking_category_id, Booking.human_attribute_name(:booking_category_id), class: 'required'
            = f.collection_radio_buttons_without_bootstrap :booking_category_id, current_organisation.booking_categories, :id, :title do |builder|
              .form-check
                = builder.radio_button class: 'form-check-input', disabled: !@booking.editable
                = builder.label class: 'form-check-label' do
                  = builder.object.title
                  
                  - if builder.object.description.present?
                    p.small.my-1.text-muted= builder.object.description
            - @booking.errors[:category].each do |error|
              .invalid-feedback.d-block = error
        - else 
          = f.hidden_field :booking_category_id, value: current_organisation.booking_categories.take.id

        = f.text_field :purpose_description, disabled: !@booking.editable
        = f.number_field :approximate_headcount, disabled: !@booking.editable, required: true
        = f.text_area :remarks, help: t('optional'), disabled: !@booking.editable

        - bookable_extras = @booking.organisation.bookable_extras
        - if bookable_extras.any?
          h5= Booking.human_attribute_name(:bookable_extra_ids)
          .mb-3
            = f.collection_check_boxes_without_bootstrap(:bookable_extra_ids, bookable_extras, :id, :title) do |option|
              - id = "input-bookable-extra-#{option.object.id}"
              .form-check
                = option.check_box class: "form-check-input", id: id, disabled: !@booking.editable
                = option.label class: "form-check-label", for: id
                - if option.object.description.present?
                  .text-muted
                    - option.object.description.lines.each do |line|
                      p= line

      .form-actions.pt-4.mt-3
        - if @booking.editable
          =<> f.submit class: 'btn btn-primary'

        = render partial: 'manage/bookings/actions', locals: { actions: @booking.booking_state.public_actions, form: f }
