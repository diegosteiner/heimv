= form_with(model: [:manage, organisation], url: manage_organisation_path(org: params[:org]), local: true) do |f|
  = f.fields_for :settings, @organisation.settings || OrganisationSettings.new do |sf|  
    - settings = sf.object

    fieldset
      h3.mt-5= t('.general')
      .card.shadow-sm 
        .card-body
          = f.text_field :name
          div[v-pre]= f.text_area :address, rows: 4
          = f.file_field :logo, help: organisation.logo.present? && organisation.logo.persisted? && image_tag(organisation.logo, width: 120)
          = f.select :locale, organisation.locales.map { [_1.upcase, _1.downcase] }
          = sf.label :locales
          = sf.collection_check_boxes :locales, Organisation.locales.keys.map(&:to_s), :downcase, :upcase, inline: true, skip_label: true
    
    fieldset
      h3.mt-5= Notification.model_name.human(count: 2)
      .card.shadow-sm 
        .card-body
          = f.check_box :notifications_enabled
          = f.email_field :email
          = f.email_field :bcc

    fieldset
      h3.mt-5= Contract.model_name.human(count: 2)
      .card.shadow-sm 
        .card-body
          div[v-pre]= f.text_area :representative_address, rows: 4
          = f.text_field :location
          = f.file_field :contract_signature, help: organisation.contract_signature.attached? && image_tag(organisation.contract_signature, width: 120)

          = sf.check_box :contract_sign_by_click_enabled
      
    fieldset
      h3.mt-5= Invoice.model_name.human(count: 2)
      .card.shadow-sm 
        .card-body
          = f.select :default_payment_info_type, subtype_options_for_select(PaymentInfo.subtypes), include_blank: true
          = f.text_field :iban
          = f.text_field :esr_ref_prefix
          div[v-pre]= f.text_area :creditor_address, rows: 4, help: t('optional')
          div[v-pre]= f.text_area :account_address, rows: 4, help: t('optional')

    fieldset
      h3.mt-5= Tenant.model_name.human(count: 2)
      .card.shadow-sm 
        .card-body
          = sf.check_box :tenant_birth_date_required

          ul.nav.nav-tabs.mt-4 role="tablist"
            - I18n.available_locales.each do |locale|
              - current_locale = locale == I18n.locale
              li.nav-item
                = link_to locale.upcase, "#nickname_label-#{locale}-tab",
                  class: "nav-link #{'active' if current_locale}",
                  aria: { controls: "nickname_label-#{locale}-tab", selected: current_locale },
                  data: { "bs-toggle": 'tab' }, role: 'tab'
          .tab-content
            - I18n.available_locales.each do |locale|
              - current_locale = locale == I18n.locale
              .tab-pane.pt-3[id="nickname_label-#{locale}-tab" class="#{'show active' if current_locale}" aria-labelledby="nickname_label-#{locale}-tab" role='tabpanel']
                = f.text_field "nickname_label_#{locale}", label: Organisation.human_attribute_name(:nickname_label)

    fieldset
      h3.mt-5= Occupancy.model_name.human(count: 2)
      .card.shadow-sm 
        .card-body
          = sf.color_field :tentative_occupancy_color, style: 'width: 5em;'
          = sf.color_field :occupied_occupancy_color, style: 'width: 5em;'
          = sf.color_field :closed_occupancy_color, style: 'width: 5em;'

          = sf.text_field :default_begins_at_time, value: settings.default_begins_at_time
          = sf.text_field :default_ends_at_time, value: settings.default_ends_at_time

          = sf.text_field :last_minute_warning, value: settings.last_minute_warning&.iso8601
          = sf.text_field :booking_window, value: settings.booking_window&.iso8601
          = sf.text_field :upcoming_soon_window, value: settings.upcoming_soon_window&.iso8601

          = sf.select :default_calendar_view, %i[months year].map { |view| [view, view] }

    = f.fields_for :deadline_settings, @organisation.deadline_settings || DeadlineSettings.new do |df|  
      - deadline_settings = @organisation.deadline_settings
      fieldset
        h3.mt-5= DeadlineSettings.model_name.human
        .card.shadow-sm 
          .card-body
            = df.text_field :unconfirmed_request_deadline, value: deadline_settings.unconfirmed_request_deadline&.iso8601
            = df.text_field :provisional_request_deadline, value: deadline_settings.provisional_request_deadline&.iso8601
            = df.text_field :awaiting_tenant_deadline, value: deadline_settings.awaiting_tenant_deadline&.iso8601
            = df.text_field :overdue_request_deadline, value: deadline_settings.overdue_request_deadline&.iso8601
            = df.text_field :awaiting_contract_deadline, value: deadline_settings.awaiting_contract_deadline&.iso8601
            = df.text_field :deadline_postponable_for, value: deadline_settings.deadline_postponable_for&.iso8601
            = df.text_field :deposit_payment_deadline, value: deadline_settings.deposit_payment_deadline&.iso8601
            = df.text_field :invoice_payment_deadline, value: deadline_settings.invoice_payment_deadline&.iso8601
            = df.text_field :payment_overdue_deadline, value: deadline_settings.payment_overdue_deadline&.iso8601

    = f.fields_for :booking_state_settings, @organisation.booking_state_settings || BookingStateSettings.new do |bsf|  
      - booking_state_settings = @organisation.booking_state_settings
      fieldset
        h3.mt-5= BookingStateSettings.model_name.human
        .card.shadow-sm 
          .card-body
            = bsf.select :default_manage_transition_to_state, BookingStateSettings.manage_transition_to_states(@organisation).map { [_1.t(:label), _1.to_sym] }, value: booking_state_settings.default_manage_transition_to_state
            = bsf.collection_select :occupied_occupancy_states, @organisation.booking_flow_class.all.values, :to_s, ->(state) { state&.t(:label) }, multiple: true
            = bsf.collection_select :editable_occupancy_states, @organisation.booking_flow_class.all.values, :to_s, ->(state) { state&.t(:label) }, multiple: true

    - if current_user.role_admin?
      = f.fields_for :accounting_settings, @organisation.accounting_settings || AccountingSettings.new do |af|  
        - accounting_settings = @organisation.accounting_settings
        fieldset
          h3.mt-5= AccountingSettings.model_name.human
          .card.shadow-sm 
            .card-body
              = af.check_box :enabled
              = af.text_field :debitor_account_nr
              = af.text_field :rental_yield_account_nr
              = af.text_field :payment_account_nr
              = af.text_field :vat_account_nr
              = af.collection_select :rental_yield_vat_category_id, @organisation.vat_categories, :id, :label, include_blank: true

    - if current_user.role_admin?
      fieldset
        h3.mt-5.text-danger 
          | Admin
        .card.shadow-sm.border-danger
          .card-body
            = f.text_field :slug 
            = f.text_field :mail_from
            div[v-pre]= f.text_area :smtp_settings, rows: 4, value: @organisation.smtp_settings.to_json
            = f.text_field :currency
            = sf.select :predefined_salutation_form, salutation_form_options_for_select(settings.predefined_salutation_form), include_blank: true
            = f.select :booking_flow_type, [BookingFlows::Default].map { [_1.to_s, _1.to_s] }
            = f.text_field :booking_ref_template
            = f.text_field :tenant_ref_template
            = f.text_field :invoice_ref_template
            = f.text_field :invoice_payment_ref_template
            = f.text_area :cors_origins, rows: 3


  .form-actions.pt-4.mt-3
    = f.submit
