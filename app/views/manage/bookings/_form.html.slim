= form_with(model: [:manage, @booking], html: { novalidate: true }) do |f|
  - if @booking.errors.any?
    .alert.alert-danger.d-flex
      .me-3
        i.fa.fa-exclamation-circle               
      ul.m-0
        - @booking.errors.full_messages.each do |message|
          li= message

  fieldset 
    = react_component('BookingOccupancyForm', { \ 
        org: current_organisation.slug, \
        booking: Public::BookingSerializer.render_as_hash(@booking), \
        namePrefix: 'booking', \ 
        required: true, \
        disabled: false, \
        defaultBeginsAtTime: current_organisation&.settings&.default_begins_at_time, \
        defaultEndsAtTime: current_organisation&.settings&.default_ends_at_time, \
        occupiableInvalidFeedback: @booking.errors.to_hash(true).slice(:occupiable_ids, :home_id).values.flatten.to_sentence, \
        occupancyInvalidFeedback: @booking.errors.to_hash(true).slice(:begins_at, :begins_at_time, :ends_at, :ends_at_time).values.flatten.to_sentence, \
        defaultView: current_user&.default_calendar_view || current_organisation&.settings&.default_calendar_view \
      }) 

    = f.check_box :ignore_conflicting
    = f.label :occupancy_color
    = f.check_box :occupancy_color, { id: 'toggle_booking_occupancy_color', checked: @booking[:occupancy_color].present?, \
                              data: { 'bs-toggle' => "disable", 'bs-target' => "#booking_occupancy_color" } }, "1", "" 
      = f.color_field :occupancy_color, hide_label: true, style: 'min-width: 5em;'

  fieldset.mt-3
    h5.mt-0= Booking.human_attribute_name(:tenant)

    = f.collection_select :tenant_id, current_organisation.tenants.ordered, :id, :to_s, { include_blank: true, hide_label: true }, { disabled: true }

    = f.fields_for :tenant, (@booking.tenant || @booking.build_tenant) do |cf|
      = cf.hidden_field :id
      = f.email_field :email
      = f.check_box :notifications_enabled
      = f.check_box :editable

      - unless current_organisation.settings.predefined_salutation_form.present?
        .row
          .col-md-4
            = cf.select :salutation_form, salutation_form_options_for_select(@booking.tenant.salutation_form), include_blank: true

      .row 
        .col-sm-6.col-md-4
          = cf.text_field :first_name

        .col-sm-6.col-md-4
          = cf.text_field :last_name
          
        .col-md-4
          - if current_organisation.show_nickname?
            = cf.text_field :nickname, label: current_organisation.nickname_label

      = cf.text_field :street_address
      = cf.text_field :address_addon

      .row
        .col-sm-4
          = cf.text_field :zipcode
        .col-sm-8
          = cf.text_field :city

      = cf.form_group :country_code, label: { text: Tenant.human_attribute_name(:country_code) } do
        = cf.country_select :country_code, { default: "CH", priority_countries: %w[CH DE FR IT] }, class: 'form-control'

      = cf.text_field :phone
      = cf.date_select :birth_date, use_two_digit_numbers: true, start_year: Time.zone.today.year - 75, end_year: Time.zone.today.year - 17, include_blank: true
      = cf.select :locale, current_organisation.locales.map { [_1.upcase, _1.downcase] }
    = f.text_field :tenant_organisation
    = f.text_area :invoice_address

  fieldset.mt-3
    h5.mt-0= Booking.model_name.human
    = f.form_group :committed_request
      = f.label :committed_request, Booking.human_attribute_name(:committed_request)
      = f.radio_button :committed_request, false, label: t(:'activerecord.enums.booking.committed_request.provisional_request'), checked: @booking.committed_request.blank?
      = f.radio_button :committed_request, true, label: t(:'activerecord.enums.booking.committed_request.definitive_request')
      - @booking.errors[:committed_request].each do |error|
        .invalid-feedback.d-block = error

    - booking_categories = [current_organisation.booking_categories.kept, @booking.category].flatten.compact_blank.uniq
    - if booking_categories.many?
      = f.collection_select :booking_category_id, booking_categories, :id, :title, include_blank: true
    - else 
      = f.hidden_field :booking_category_id, value: booking_categories.first&.id
      
    = f.text_field :purpose_description
    = f.text_field :approximate_headcount, inputmode: "numeric" 
    = f.text_area :remarks
    = f.text_area :internal_remarks
    = f.text_area :cancellation_reason
    = f.collection_select :transition_to, @booking.booking_flow.possible_transitions, :itself, ->(state) { t(:label, scope: [:booking_states, state]) }, { include_blank: true }

  fieldset.mt-4
    h5.mt-0= BookingQuestion.model_name.human(count: 2)
    = f.fields_for :booking_question_responses, @booking.booking_question_responses do |bqrf|
      - response = bqrf.object
      - question = response.booking_question
      = bqrf.hidden_field :booking_question_id
      = render partial: response.booking_question.to_partial_path('booking_form_field'), locals: { booking: @booking, response: response, question: question, form: bqrf, disabled: false }

  fieldset.mt-3
    h5.mt-0= AgentBooking.model_name.human
    = f.fields_for :agent_booking do |af|
      = af.text_field :booking_agent_code
      = af.text_field :booking_agent_ref

  .form-actions.pt-4.mt-3
    = f.submit
    - unless @booking.new_record?
      =<> link_to t(:back), manage_booking_path(@booking), class: 'btn btn-default'
