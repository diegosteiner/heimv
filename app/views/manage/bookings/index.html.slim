- title Booking.model_name.human(count: 2)

h1.my-0= Booking.model_name.human(count: 2)

.my-3
  .btn-group.me-3[role="group"]
    button.btn.btn-primary[type="button" data-bs-toggle="modal" data-bs-target="#filter"]
      span.fa.fa-filter<>
      = t(:filter)
    = link_to manage_bookings_path(filter: { current_booking_states: current_organisation.booking_flow_class.displayed_by_default }), class: 'btn btn-outline-primary bg-body'
      = t('.canned_filter_default')
    = link_to manage_bookings_path(filter: { current_booking_states: [:upcoming, :upcoming_soon] }), class: 'btn btn-outline-primary bg-body'
      = t('.canned_filter_upcoming')
  
  .dropdown.d-inline-block
    button#dropdownNewBookingButton.btn.btn-primary.dropdown-toggle aria-expanded="false" aria-haspopup="true" data-bs-toggle="dropdown" type="button" 
      span.fa.fa-file-o<>
      = t('.new')
    .dropdown-menu aria-labelledby="dropdownNewBookingButton" 
      = link_to(new_manage_booking_path(booking: @filter&.derive_booking_attributes), class: 'dropdown-item')
        = Booking.model_name.human
      = link_to(new_public_booking_path(booking: @filter&.derive_booking_attributes), class: 'dropdown-item')
        = t('.new_request')
      = link_to(new_manage_occupancy_path(occupancy: { occupancy_type: :closed }), class: 'dropdown-item')
        = t('.new_closed_occupancy')
      = link_to(new_public_agent_booking_path, class: 'dropdown-item')
        = AgentBooking.model_name.human
      = link_to(import_manage_bookings_path, class: 'dropdown-item')
        = t(:import)

#filter.modal.fade
  .modal-dialog.modal-lg
    .modal-content 
      = form_with(model: @filter, url: manage_bookings_path, scope: 'filter', method: :GET, local: true) do |f|
        = hidden_field_tag :locale, I18n.locale
        .modal-body
          = render partial: @filter.to_partial_path('filter_fields'), locals: { f: f }
        .modal-footer
          = f.submit t(:filter), class: 'btn btn-primary'
          =<> link_to manage_bookings_path, class: 'btn btn-outline-secondary bg-white'
            = t(:reset)

- if @bookings.empty?
  p.text-center.my-5
    = t('.no_records_yet', options: [ \
       link_to(t('.new_request'), new_public_booking_path(booking: @filter&.derive_booking_attributes)), \
       link_to(Booking.model_name.human, new_manage_booking_path(booking: @filter&.derive_booking_attributes)) \
      ].join(" #{t(:or)} ")).html_safe
       
- elsif @bookings.size > 250
  .alert.alert-danger.d-flex
    .me-3
      i.fa.fa-exclamation-circle
    = t('.too_many_records')
- else
  - grouped_bookings = @bookings.group_by { |booking| booking.booking_state_cache }
  - current_organisation.booking_flow_class.all.values.each do |state|
    - bookings = grouped_bookings[state.to_s]
    - collapse_id = "collapse-#{CGI.escape(state.to_s)}"
    - next if bookings.blank?

    section.mt-4
      h3
        = state.t(:label)
        a.badge.rounded-pill.bg-danger.badge-small.ms-3[href="##{collapse_id}" data-bs-toggle="collapse"]
          = bookings.count
      p.text-muted = state.t(:help)

      .collapse.show[id=collapse_id]
        == render partial: 'table', locals: { bookings: bookings }
