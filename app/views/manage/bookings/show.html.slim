= render partial: 'manage/bookings/navigation', locals: { booking: @booking }

section.breakout-sm
  .row.mt-4
    .col-md-9
      .card
        .card-header.bg-primary.text-white
          h5.card-title.m-0= @booking.ref
        .card-body
          .row.mb-3
            .col
              strong= Occupancy.model_name.human
              = render partial: 'manage/occupancies/occupancy_range', locals: { occupancy: @booking.occupancy }
            .col
              strong= Booking.human_attribute_name(:home)
              br
              = link_to @booking.home, manage_home_path(@booking.home)
          .row.mb-3
            .col
              - if @booking.tenant.present?
                strong= Booking.human_attribute_name(:tenant)
                = tenant_address(@booking.tenant)
                - if @booking.tenant.birth_date.present?
                  p.m-0= l(@booking.tenant.birth_date)

              - if @booking.agent_booking?
                p.m-0.mt-3
                  strong= BookingAgent.model_name.human(count: :one)
                p.m-0= link_to @booking.booking_agent.name, manage_booking_agent_path(@booking.booking_agent)
                p= @booking.agent_booking.booking_agent_ref


            .col
              strong= Booking.human_attribute_name(:tenant_organisation)
              br
              = @booking.tenant_organisation

          .row.mb-3
            .col
              strong= Booking.human_attribute_name(:purpose)
              br
              = Booking.human_enum(:purpose, @booking.purpose)
            .col
              strong= Booking.human_attribute_name(:approximate_headcount)
              br
              = @booking.approximate_headcount

          - if @booking.deadline.present?
            p
              strong= Deadline.model_name.human
              br
              = l(@booking.deadline.at, format: :short)

          .row.mb-3
            .col
              - if @booking.internal_remarks.present?
                p
                  strong= Booking.human_attribute_name(:internal_remarks)
                  br
                  = @booking.internal_remarks

            .col
              - if @booking.remarks.present?
                p
                  strong= Booking.human_attribute_name(:remarks)
                  br
                  = @booking.remarks

          .row.mb-3
            .col
              strong= Booking.human_attribute_name(:state)
              p= @booking.current_state.translated
              br
              = render partial: 'manage/bookings/checklist', locals: { booking: @booking }
            .col 
              strong= t('.public_booking_url')
              p
                = link_to edit_public_booking_url(@booking), edit_public_booking_url(@booking)
              br


          = form_with(url: manage_booking_path(@booking), method: :patch, local: true) do |f|
            - actions = current_organisation.booking_strategy.manage_actions.values
            = render partial: 'manage/bookings/actions', locals: { actions: actions, context: { booking: @booking }, form: f }
            '
            .dropdown.d-inline
              button.btn.btn-outline-primary.dropdown-toggle[type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" value='allowed_transitions']
                = Booking.human_attribute_name(:transition_to)
              .dropdown-menu aria-labelledby="dropdownMenuButton"
                - @booking.state_machine.allowed_transitions.each do |state|
                  = f.button name: :'booking[transition_to]', value: state, class: 'dropdown-item'
                    = @booking.booking_strategy.t(:label, scope: [:states, state])


            = link_to edit_manage_booking_path(@booking), class: 'btn btn-default'
              span.fa.fa-edit
            '
    .col-md-3
      ul.list-group
        - @booking.booking_transitions.order(created_at: :desc).each do |transition|
          li.list-group-item
            span.badge.badge-primary
              = current_organisation.booking_strategy.t(transition.to_state, scope: :states, default: {})[:label]
            br
            small
              = time_tag transition.created_at
