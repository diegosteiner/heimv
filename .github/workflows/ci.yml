---
name: Continous Integration - CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      COMPOSE_PROJECT_NAME: heimv
      IMAGE_TAG: "ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: update version
        run: |
          if [ "${GITHUB_REF_TYPE}" == "tag" ]; then
            echo "${GITHUB_REF_NAME}" > VERSION
          else
            ref=$(echo ${GITHUB_REF#refs/heads/})
            sha=$(echo ${GITHUB_SHA} | cut -c1-7)
            echo " ${ref}@${sha}" >> VERSION
          fi

        # docker buildx bake -f docker-compose.ci.yml e2e_test --set e2e_test.output=type=tar,dest=e2e_test.tar --set *.cache-from=type=gha --set *.cache-to=type=gha,mode=max
        # docker buildx bake -f docker-compose.ci.yml e2e_target --set e2e_target.output=type=tar,dest=e2e_target.tar --set *.cache-from=type=gha --set *.cache-to=type=gha,mode=max
      - name: docker build and export
        run: |
          docker buildx bake -f docker-compose.ci.yml e2e_test --load --set *.cache-from=type=gha --set *.cache-to=type=gha,mode=max
          docker buildx bake -f docker-compose.ci.yml e2e_target --load --set *.cache-from=type=gha --set *.cache-to=type=gha,mode=max

  #     - name: upload image test 
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: e2e_test
  #         path: e2e_test.tar

  #     - name: upload image target 
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: e2e_target
  #         path: e2e_target.tar
    
  # check:
  #   runs-on: ubuntu-latest
  #   needs: 
  #     - build
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: download images
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: e2e_target

  #     - name: download images
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: e2e_test

      # - name: load images
      #   run: |
      #     docker load -i e2e_test.tar
      #     docker load -i e2e_target.tar

      - name: run specs
        run: docker compose --file docker-compose.ci.yml run --rm e2e_test bin/check_ci
      
      - name: prepare e2e specs
        run: |
          docker compose --file docker-compose.ci.yml up -d e2e_target
          docker compose --file docker-compose.ci.yml run e2e_test bin/rails db:drop
          docker compose --file docker-compose.ci.yml run e2e_target bin/rails db:create db:migrate

      - name: run e2e specs
        run: |
          docker compose --file docker-compose.ci.yml run e2e_test bin/rspec ./spec --tag @type:feature

      - if: failure()
        name: prepare artifacts
        run: | 
          mkdir -p artifacts
          docker compose --file docker-compose.ci.yml logs > ./artifacts/docker-compose.ci.log
          docker cp $(docker compose --file docker-compose.ci.yml ps -qa e2e_test | tail -n1):/rails/tmp/capybara ./artifacts/

      - if: failure()
        name: upload artifacts
        uses: actions/upload-artifact@master
        with:
          name: artifacts
          path: artifacts

      - name: stop target
        run: docker compose --file docker-compose.ci.yml down --remove-orphans
      
      - name: push image
        run: |
          docker tag heimv-e2e_target $IMAGE_TAG
          docker push $IMAGE_TAG

  # push:
  #   runs-on: ubuntu-latest
  #   if: github.event_name != 'pull_request'
  #   needs: 
  #     - build
  #     - check
  #   env:
  #     IMAGE_TAG: "ghcr.io/${{ github.repository }}:${{ github.ref_name }}"
  #   steps:
  #     - name: checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: buildx
  #       uses: docker/setup-buildx-action@master

  #     - name: docker login
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: download images
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: e2e_target

  #     - name: load images
  #       run: |
  #         docker load -i e2e_target.tar

      - name: push image
        run: |
          docker tag heimv-e2e_target $IMAGE_TAG
          docker push $IMAGE_TAG
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: e2e_target

  #     - name: load images
  #       run: |
  #         docker load -i e2e_target.tar

      # - name: push image
      #   run: |
      #     docker tag heimv-e2e_target $IMAGE_TAG
      #     docker push $IMAGE_TAG
